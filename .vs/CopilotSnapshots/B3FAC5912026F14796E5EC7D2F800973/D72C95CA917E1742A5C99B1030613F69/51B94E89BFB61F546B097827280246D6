using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using eDocCore.Domain.Entities;
using eDocCore.Domain.Interfaces;

namespace eDocCore.Application.Services
{
    /// <summary>
    /// Service đơn giản cho Role (không dùng CQRS)
    /// </summary>
    public class RoleService : IRoleService
    {
        private readonly IRoleRepository _roleRepository;

        public RoleService(IRoleRepository roleRepository)
        {
            _roleRepository = roleRepository;
        }

        public Task<IReadOnlyList<Role>> GetAllAsync()
            => _roleRepository.GetAllAsync();

        public Task<Role?> GetByIdAsync(Guid id)
            => _roleRepository.GetByIdAsync(id);

        public async Task<Role> CreateAsync(Role role)
        {
            // Validate cơ bản (ví dụ: trùng tên)
            if (string.IsNullOrWhiteSpace(role.Name))
                throw new ArgumentException("Role name is required", nameof(role.Name));

            if (await _roleRepository.ExistsByNameAsync(role.Name))
                throw new InvalidOperationException("Role name already exists");

            role.IsActive = role.IsActive; // giữ nguyên
            return await _roleRepository.AddAsync(role);
        }

        public async Task<bool> UpdateAsync(Role role)
        {
            var existing = await _roleRepository.GetByIdAsync(role.Id);
            if (existing == null) return false;

            // Validate tên trùng nếu đổi tên
            if (!string.Equals(existing.Name, role.Name, StringComparison.OrdinalIgnoreCase)
                && await _roleRepository.ExistsByNameAsync(role.Name))
            {
                throw new InvalidOperationException("Role name already exists");
            }

            existing.Name = role.Name;
            existing.IsActive = role.IsActive;
            await _roleRepository.UpdateAsync(existing);
            return true;
        }

        public async Task<bool> DeleteAsync(Guid id)
        {
            return await _roleRepository.DeleteAsync(id);
        }
    }
}
