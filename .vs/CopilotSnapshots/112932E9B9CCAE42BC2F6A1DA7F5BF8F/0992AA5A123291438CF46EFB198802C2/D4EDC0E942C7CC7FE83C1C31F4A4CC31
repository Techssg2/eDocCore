using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using AutoMapper;
using eDocCore.Application.Common.Models;
using eDocCore.Application.Features.Roles.DTOs;
using eDocCore.Domain.Entities;
using eDocCore.Domain.Interfaces.Extend;
using System.Linq;
using System.Linq.Expressions;
using eDocCore.Domain.Interfaces;
using eDocCore.Application.Common.Exceptions;
using Microsoft.Extensions.Logging;

namespace eDocCore.Application.Features.Roles.Services
{
    /// <summary>
    /// Service đơn giản cho Role (không dùng CQRS)
    /// </summary>
    public class RoleService : IRoleService
    {
        private readonly IRoleRepository _roleRepository;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork _unitOfWork;
        private readonly ILogger<RoleService> _logger;

        public RoleService(IRoleRepository roleRepository, IMapper mapper, IUnitOfWork unitOfWork, ILogger<RoleService> logger)
        {
            _roleRepository = roleRepository;
            _mapper = mapper;
            _unitOfWork = unitOfWork;
            _logger = logger;
        }

        public async Task<IReadOnlyList<RoleDto>> GetAllAsync()
        {
            _logger.LogDebug("Fetching all roles");
            var roles = await _roleRepository.GetAllAsync();
            return _mapper.Map<IReadOnlyList<RoleDto>>(roles);
        }

        public async Task<RoleDto?> GetByIdAsync(Guid id)
        {
            _logger.LogDebug("Fetching role by id {RoleId}", id);
            var role = await _roleRepository.GetByIdAsync(id);
            return _mapper.Map<RoleDto?>(role);
        }

        public async Task<RoleDto> CreateAsync(CreateRoleRequest request)
        {
            await _unitOfWork.BeginTransactionAsync();
            try
            {
                var name = request.Name.Trim();
                _logger.LogInformation("Creating role {RoleName}", name);
                if (await _roleRepository.ExistsByNameAsync(name))
                    throw new ConflictException("Role name already exists");

                var role = _mapper.Map<Role>(request);
                role.Name = name;
                role = await _roleRepository.AddAsync(role);

                await _unitOfWork.CommitAsync();
                _logger.LogInformation("Created role {RoleId}", role.Id);
                return _mapper.Map<RoleDto>(role);
            }
            catch (AppException ex)
            {
                _logger.LogWarning(ex, "Business error creating role {RoleName}", request.Name);
                await _unitOfWork.RollbackAsync();
                throw;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error creating role {RoleName}", request.Name);
                await _unitOfWork.RollbackAsync();
                throw;
            }
        }

        public async Task<bool> UpdateAsync(UpdateRoleRequest request)
        {
            await _unitOfWork.BeginTransactionAsync();
            try
            {
                _logger.LogInformation("Updating role {RoleId}", request.Id);
                var existing = await _roleRepository.GetByIdAsync(request.Id);
                if (existing == null)
                {
                    _logger.LogWarning("Role {RoleId} not found for update", request.Id);
                    throw new ConflictException($"Role {request.Id} not found for update", new List<string>() { "Đây là lỗi" });
                }

                var name = request.Name.Trim();
                if (!string.Equals(existing.Name, name, StringComparison.OrdinalIgnoreCase)
                    && await _roleRepository.ExistsByNameAsync(name))
                {
                    throw new ConflictException("Role name already exists", new List<string> () { "Đây là lỗi"});
                }

                // Nếu yêu cầu set Inactive nhưng role còn đang được gán cho user => lỗi
                if (!request.IsActive)
                {
                    var inUse = await _roleRepository.HasAssignedUsersAsync(request.Id);
                    if (inUse)
                    {
                        throw new BusinessRuleException("Role is assigned to existing users. Deactivate is not allowed.");
                    }
                }

                _mapper.Map(request, existing);
                existing.Name = name;
                await _roleRepository.UpdateAsync(existing);

                await _unitOfWork.CommitAsync();
                _logger.LogInformation("Updated role {RoleId}", request.Id);
                return true;
            }
            catch (AppException ex)
            {
                _logger.LogWarning(ex, "Business error updating role {RoleId}", request.Id);
                await _unitOfWork.RollbackAsync();
                throw;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error updating role {RoleId}", request.Id);
                await _unitOfWork.RollbackAsync();
                throw;
            }
        }

        public async Task<bool> DeleteAsync(Guid id)
        {
            await _unitOfWork.BeginTransactionAsync();
            try
            {
                _logger.LogInformation("Deleting role {RoleId}", id);
                var deleted = await _roleRepository.DeleteAsync(id);
                if (!deleted)
                {
                    _logger.LogWarning("Role {RoleId} not found for delete", id);
                    await _unitOfWork.RollbackAsync();
                    return false;
                }

                await _unitOfWork.CommitAsync();
                _logger.LogInformation("Deleted role {RoleId}", id);
                return true;
            }
            catch (AppException ex)
            {
                _logger.LogWarning(ex, "Business error deleting role {RoleId}", id);
                await _unitOfWork.RollbackAsync();
                throw;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unexpected error deleting role {RoleId}", id);
                await _unitOfWork.RollbackAsync();
                throw;
            }
        }

        public async Task<PagedResult<RoleDto>> GetPagedInternalAsync(GetRolesRequest request, System.Threading.CancellationToken ct = default)
        {
            // filter theo keyword & IsActive
            Expression<Func<Role, bool>>? filter = null;

            if (!string.IsNullOrWhiteSpace(request.Keyword) || request.IsActive.HasValue)
            {
                var keyword = request.Keyword;
                filter = r =>
                    (string.IsNullOrWhiteSpace(keyword) || r.Name.Contains(keyword)) &&
                    (!request.IsActive.HasValue || r.IsActive == request.IsActive.Value);
            }

            Func<IQueryable<Role>, IOrderedQueryable<Role>> orderBy = q => q
                .OrderByDescending(x => x.Created)
                .ThenBy(x => x.Id); // deterministic

            // Project trực tiếp sang RoleDto để giảm IO và bỏ AutoMapper mapping ở client
            Expression<Func<Role, RoleDto>> selector = r => new RoleDto
            {
                Id = r.Id,
                Name = r.Name,
                IsActive = r.IsActive,
                Created = r.Created,
                Modified = r.Modified
            };

            _logger.LogDebug("Paging roles: page={Page} size={Size} keyword={Keyword} isActive={IsActive}", request.Page, request.PageSize, request.Keyword, request.IsActive);
            var (items, total) = await _roleRepository.GetPagedProjectedAsync(
                request.Page,
                request.PageSize,
                filter,
                orderBy,
                selector,
                asNoTracking: true,
                ct: ct);

            return new PagedResult<RoleDto>
            {
                Items = items,
                TotalCount = total,
                Page = request.Page,
                PageSize = request.PageSize
            };
        }
    }
}
